// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/usecase/interface/user.go

// Package mock is a generated GoMock package.
package mock

import (
	models "clean/pkg/utils/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockUserUseCase) AddAddress(userId int, address models.AddressInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", userId, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockUserUseCaseMockRecorder) AddAddress(userId, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockUserUseCase)(nil).AddAddress), userId, address)
}

// AddToWishlist mocks base method.
func (m *MockUserUseCase) AddToWishlist(product_id, user_id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToWishlist", product_id, user_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToWishlist indicates an expected call of AddToWishlist.
func (mr *MockUserUseCaseMockRecorder) AddToWishlist(product_id, user_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToWishlist", reflect.TypeOf((*MockUserUseCase)(nil).AddToWishlist), product_id, user_id)
}

// GetAllAddress mocks base method.
func (m *MockUserUseCase) GetAllAddress(userId int) (models.AddressInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAddress", userId)
	ret0, _ := ret[0].(models.AddressInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAddress indicates an expected call of GetAllAddress.
func (mr *MockUserUseCaseMockRecorder) GetAllAddress(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAddress", reflect.TypeOf((*MockUserUseCase)(nil).GetAllAddress), userId)
}

// GetWishList mocks base method.
func (m *MockUserUseCase) GetWishList(userID int) ([]models.WishListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWishList", userID)
	ret0, _ := ret[0].([]models.WishListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWishList indicates an expected call of GetWishList.
func (mr *MockUserUseCaseMockRecorder) GetWishList(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWishList", reflect.TypeOf((*MockUserUseCase)(nil).GetWishList), userID)
}

// RemoveFromWishlist mocks base method.
func (m *MockUserUseCase) RemoveFromWishlist(productId, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromWishlist", productId, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromWishlist indicates an expected call of RemoveFromWishlist.
func (mr *MockUserUseCaseMockRecorder) RemoveFromWishlist(productId, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromWishlist", reflect.TypeOf((*MockUserUseCase)(nil).RemoveFromWishlist), productId, userID)
}

// UpdateAddress mocks base method.
func (m *MockUserUseCase) UpdateAddress(address models.AddressInfo, addressID, userID int) (models.AddressInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", address, addressID, userID)
	ret0, _ := ret[0].(models.AddressInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockUserUseCaseMockRecorder) UpdateAddress(address, addressID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockUserUseCase)(nil).UpdateAddress), address, addressID, userID)
}

// UpdatePassword mocks base method.
func (m *MockUserUseCase) UpdatePassword(ctx context.Context, body models.UpdatePassword) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockUserUseCaseMockRecorder) UpdatePassword(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUserUseCase)(nil).UpdatePassword), ctx, body)
}

// UpdateUserDetails mocks base method.
func (m *MockUserUseCase) UpdateUserDetails(userDetails models.UsersProfileDetails, userID int) (models.UsersProfileDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserDetails", userDetails, userID)
	ret0, _ := ret[0].(models.UsersProfileDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserDetails indicates an expected call of UpdateUserDetails.
func (mr *MockUserUseCaseMockRecorder) UpdateUserDetails(userDetails, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserDetails", reflect.TypeOf((*MockUserUseCase)(nil).UpdateUserDetails), userDetails, userID)
}

// UserDetails mocks base method.
func (m *MockUserUseCase) UserDetails(userID int) (models.UsersProfileDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDetails", userID)
	ret0, _ := ret[0].(models.UsersProfileDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserDetails indicates an expected call of UserDetails.
func (mr *MockUserUseCaseMockRecorder) UserDetails(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDetails", reflect.TypeOf((*MockUserUseCase)(nil).UserDetails), userID)
}

// UserLoginWithPassword mocks base method.
func (m *MockUserUseCase) UserLoginWithPassword(user models.LoginDetail) (*models.TokenUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLoginWithPassword", user)
	ret0, _ := ret[0].(*models.TokenUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLoginWithPassword indicates an expected call of UserLoginWithPassword.
func (mr *MockUserUseCaseMockRecorder) UserLoginWithPassword(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLoginWithPassword", reflect.TypeOf((*MockUserUseCase)(nil).UserLoginWithPassword), user)
}

// UserSignup mocks base method.
func (m *MockUserUseCase) UserSignup(user models.SignupDetail) (*models.TokenUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignup", user)
	ret0, _ := ret[0].(*models.TokenUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignup indicates an expected call of UserSignup.
func (mr *MockUserUseCaseMockRecorder) UserSignup(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignup", reflect.TypeOf((*MockUserUseCase)(nil).UserSignup), user)
}
