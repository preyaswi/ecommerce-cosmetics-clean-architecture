// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/usecase/interface/product.go

// Package mock is a generated GoMock package.
package mock

import (
	models "clean/pkg/utils/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductUseCase is a mock of ProductUseCase interface.
type MockProductUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockProductUseCaseMockRecorder
}

// MockProductUseCaseMockRecorder is the mock recorder for MockProductUseCase.
type MockProductUseCaseMockRecorder struct {
	mock *MockProductUseCase
}

// NewMockProductUseCase creates a new mock instance.
func NewMockProductUseCase(ctrl *gomock.Controller) *MockProductUseCase {
	mock := &MockProductUseCase{ctrl: ctrl}
	mock.recorder = &MockProductUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductUseCase) EXPECT() *MockProductUseCaseMockRecorder {
	return m.recorder
}

// FilterCategory mocks base method.
func (m *MockProductUseCase) FilterCategory(data map[string]int) ([]models.ProductBrief, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterCategory", data)
	ret0, _ := ret[0].([]models.ProductBrief)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterCategory indicates an expected call of FilterCategory.
func (mr *MockProductUseCaseMockRecorder) FilterCategory(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterCategory", reflect.TypeOf((*MockProductUseCase)(nil).FilterCategory), data)
}

// ShowAllProducts mocks base method.
func (m *MockProductUseCase) ShowAllProducts(page, count int) ([]models.ProductBrief, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowAllProducts", page, count)
	ret0, _ := ret[0].([]models.ProductBrief)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowAllProducts indicates an expected call of ShowAllProducts.
func (mr *MockProductUseCaseMockRecorder) ShowAllProducts(page, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowAllProducts", reflect.TypeOf((*MockProductUseCase)(nil).ShowAllProducts), page, count)
}

// ShowIndividualProducts mocks base method.
func (m *MockProductUseCase) ShowIndividualProducts(id int) (*models.ProductBrief, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowIndividualProducts", id)
	ret0, _ := ret[0].(*models.ProductBrief)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowIndividualProducts indicates an expected call of ShowIndividualProducts.
func (mr *MockProductUseCaseMockRecorder) ShowIndividualProducts(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowIndividualProducts", reflect.TypeOf((*MockProductUseCase)(nil).ShowIndividualProducts), id)
}
