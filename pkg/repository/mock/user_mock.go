// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interface/user.go

// Package mock is a generated GoMock package.
package mock

import (
	domain "clean/pkg/domain"
	models "clean/pkg/utils/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockUserRepository) AddAddress(userId int, address models.AddressInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", userId, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockUserRepositoryMockRecorder) AddAddress(userId, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockUserRepository)(nil).AddAddress), userId, address)
}

// AddToWishList mocks base method.
func (m *MockUserRepository) AddToWishList(userID, productID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToWishList", userID, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToWishList indicates an expected call of AddToWishList.
func (mr *MockUserRepositoryMockRecorder) AddToWishList(userID, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToWishList", reflect.TypeOf((*MockUserRepository)(nil).AddToWishList), userID, productID)
}

// CheckProductExist mocks base method.
func (m *MockUserRepository) CheckProductExist(pid int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckProductExist", pid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckProductExist indicates an expected call of CheckProductExist.
func (mr *MockUserRepositoryMockRecorder) CheckProductExist(pid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProductExist", reflect.TypeOf((*MockUserRepository)(nil).CheckProductExist), pid)
}

// CheckUserAvailability mocks base method.
func (m *MockUserRepository) CheckUserAvailability(email string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserAvailability", email)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckUserAvailability indicates an expected call of CheckUserAvailability.
func (mr *MockUserRepositoryMockRecorder) CheckUserAvailability(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserAvailability", reflect.TypeOf((*MockUserRepository)(nil).CheckUserAvailability), email)
}

// CheckUserExistsByEmail mocks base method.
func (m *MockUserRepository) CheckUserExistsByEmail(email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExistsByEmail", email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserExistsByEmail indicates an expected call of CheckUserExistsByEmail.
func (mr *MockUserRepositoryMockRecorder) CheckUserExistsByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExistsByEmail", reflect.TypeOf((*MockUserRepository)(nil).CheckUserExistsByEmail), email)
}

// CheckUserExistsByPhone mocks base method.
func (m *MockUserRepository) CheckUserExistsByPhone(phone string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExistsByPhone", phone)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserExistsByPhone indicates an expected call of CheckUserExistsByPhone.
func (mr *MockUserRepositoryMockRecorder) CheckUserExistsByPhone(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExistsByPhone", reflect.TypeOf((*MockUserRepository)(nil).CheckUserExistsByPhone), phone)
}

// CreateReferralEntry mocks base method.
func (m *MockUserRepository) CreateReferralEntry(userDetails models.SignupDetailResponse, userReferral string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReferralEntry", userDetails, userReferral)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReferralEntry indicates an expected call of CreateReferralEntry.
func (mr *MockUserRepositoryMockRecorder) CreateReferralEntry(userDetails, userReferral interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReferralEntry", reflect.TypeOf((*MockUserRepository)(nil).CreateReferralEntry), userDetails, userReferral)
}

// FindUserDetailsByEmail mocks base method.
func (m *MockUserRepository) FindUserDetailsByEmail(user models.LoginDetail) (models.UserLoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserDetailsByEmail", user)
	ret0, _ := ret[0].(models.UserLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserDetailsByEmail indicates an expected call of FindUserDetailsByEmail.
func (mr *MockUserRepositoryMockRecorder) FindUserDetailsByEmail(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserDetailsByEmail", reflect.TypeOf((*MockUserRepository)(nil).FindUserDetailsByEmail), user)
}

// GetAllAddress mocks base method.
func (m *MockUserRepository) GetAllAddress(userId int) (models.AddressInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAddress", userId)
	ret0, _ := ret[0].(models.AddressInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAddress indicates an expected call of GetAllAddress.
func (mr *MockUserRepositoryMockRecorder) GetAllAddress(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAddress", reflect.TypeOf((*MockUserRepository)(nil).GetAllAddress), userId)
}

// GetAllAddresses mocks base method.
func (m *MockUserRepository) GetAllAddresses(userID int) ([]models.AddressInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAddresses", userID)
	ret0, _ := ret[0].([]models.AddressInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAddresses indicates an expected call of GetAllAddresses.
func (mr *MockUserRepositoryMockRecorder) GetAllAddresses(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAddresses", reflect.TypeOf((*MockUserRepository)(nil).GetAllAddresses), userID)
}

// GetAllPaymentOption mocks base method.
func (m *MockUserRepository) GetAllPaymentOption() ([]models.PaymentDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPaymentOption")
	ret0, _ := ret[0].([]models.PaymentDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPaymentOption indicates an expected call of GetAllPaymentOption.
func (mr *MockUserRepositoryMockRecorder) GetAllPaymentOption() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPaymentOption", reflect.TypeOf((*MockUserRepository)(nil).GetAllPaymentOption))
}

// GetUserIdFromReferrals mocks base method.
func (m *MockUserRepository) GetUserIdFromReferrals(ReferralCode string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIdFromReferrals", ReferralCode)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIdFromReferrals indicates an expected call of GetUserIdFromReferrals.
func (mr *MockUserRepositoryMockRecorder) GetUserIdFromReferrals(ReferralCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIdFromReferrals", reflect.TypeOf((*MockUserRepository)(nil).GetUserIdFromReferrals), ReferralCode)
}

// GetWishList mocks base method.
func (m *MockUserRepository) GetWishList(userId int) ([]models.WishListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWishList", userId)
	ret0, _ := ret[0].([]models.WishListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWishList indicates an expected call of GetWishList.
func (mr *MockUserRepositoryMockRecorder) GetWishList(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWishList", reflect.TypeOf((*MockUserRepository)(nil).GetWishList), userId)
}

// ProductExistInWishList mocks base method.
func (m *MockUserRepository) ProductExistInWishList(productID, userID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductExistInWishList", productID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductExistInWishList indicates an expected call of ProductExistInWishList.
func (mr *MockUserRepositoryMockRecorder) ProductExistInWishList(productID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductExistInWishList", reflect.TypeOf((*MockUserRepository)(nil).ProductExistInWishList), productID, userID)
}

// RemoveFromWishlist mocks base method.
func (m *MockUserRepository) RemoveFromWishlist(userID, productId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromWishlist", userID, productId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromWishlist indicates an expected call of RemoveFromWishlist.
func (mr *MockUserRepositoryMockRecorder) RemoveFromWishlist(userID, productId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromWishlist", reflect.TypeOf((*MockUserRepository)(nil).RemoveFromWishlist), userID, productId)
}

// UpdateAddress mocks base method.
func (m *MockUserRepository) UpdateAddress(address models.AddressInfo, addressID, userID int) (models.AddressInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", address, addressID, userID)
	ret0, _ := ret[0].(models.AddressInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockUserRepositoryMockRecorder) UpdateAddress(address, addressID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockUserRepository)(nil).UpdateAddress), address, addressID, userID)
}

// UpdateFirstName mocks base method.
func (m *MockUserRepository) UpdateFirstName(name string, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFirstName", name, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFirstName indicates an expected call of UpdateFirstName.
func (mr *MockUserRepositoryMockRecorder) UpdateFirstName(name, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFirstName", reflect.TypeOf((*MockUserRepository)(nil).UpdateFirstName), name, userID)
}

// UpdateLastName mocks base method.
func (m *MockUserRepository) UpdateLastName(name string, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastName", name, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastName indicates an expected call of UpdateLastName.
func (mr *MockUserRepositoryMockRecorder) UpdateLastName(name, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastName", reflect.TypeOf((*MockUserRepository)(nil).UpdateLastName), name, userID)
}

// UpdateReferralAmount mocks base method.
func (m *MockUserRepository) UpdateReferralAmount(referralAmount float64, referredUserId, currentUserID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReferralAmount", referralAmount, referredUserId, currentUserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReferralAmount indicates an expected call of UpdateReferralAmount.
func (mr *MockUserRepositoryMockRecorder) UpdateReferralAmount(referralAmount, referredUserId, currentUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReferralAmount", reflect.TypeOf((*MockUserRepository)(nil).UpdateReferralAmount), referralAmount, referredUserId, currentUserID)
}

// UpdateUserEmail mocks base method.
func (m *MockUserRepository) UpdateUserEmail(email string, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserEmail", email, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserEmail indicates an expected call of UpdateUserEmail.
func (mr *MockUserRepositoryMockRecorder) UpdateUserEmail(email, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserEmail", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserEmail), email, userID)
}

// UpdateUserPassword mocks base method.
func (m *MockUserRepository) UpdateUserPassword(password string, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", password, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockUserRepositoryMockRecorder) UpdateUserPassword(password, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserPassword), password, userID)
}

// UpdateUserPhone mocks base method.
func (m *MockUserRepository) UpdateUserPhone(phone string, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPhone", phone, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPhone indicates an expected call of UpdateUserPhone.
func (mr *MockUserRepositoryMockRecorder) UpdateUserPhone(phone, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPhone", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserPhone), phone, userID)
}

// UserDetails mocks base method.
func (m *MockUserRepository) UserDetails(userID int) (models.UsersProfileDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDetails", userID)
	ret0, _ := ret[0].(models.UsersProfileDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserDetails indicates an expected call of UserDetails.
func (mr *MockUserRepositoryMockRecorder) UserDetails(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDetails", reflect.TypeOf((*MockUserRepository)(nil).UserDetails), userID)
}

// UserPassword mocks base method.
func (m *MockUserRepository) UserPassword(userID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserPassword", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserPassword indicates an expected call of UserPassword.
func (mr *MockUserRepositoryMockRecorder) UserPassword(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserPassword", reflect.TypeOf((*MockUserRepository)(nil).UserPassword), userID)
}

// UserSignup mocks base method.
func (m *MockUserRepository) UserSignup(user models.SignupDetail) (models.SignupDetailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignup", user)
	ret0, _ := ret[0].(models.SignupDetailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignup indicates an expected call of UserSignup.
func (mr *MockUserRepositoryMockRecorder) UserSignup(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignup", reflect.TypeOf((*MockUserRepository)(nil).UserSignup), user)
}
